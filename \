/*************************************************************************
	> File Name: coroutine_lib.cc
	> Author: MarkWoo
	> Mail:wcgwuxinwei@gmail.com 
	> Created Time: 2015年10月08日 星期四 04时00分00秒
 ************************************************************************/

#include<iostream>
#include<string>
#include "coroutine_lib.h"

void Func1(void *args) {
	for (int i = 0; i < 3; ++i) {
		printf("******Func1 start\n");
		UthreadYield(*(Schedule *)(args));
		sleep(1);
	}
}

void Func2(void *args) {
	for (int i = 0; i < 3; ++i) {
		printf("******Func2 start\n");
		sleep(1);
	}
}

void Func3(void *args) {
	for (int i = 0; i < 3; ++i) {
		printf("******Func3 start\n");
		UthreadYield(*(Schedule *)(args));
		sleep(1);
	}
}

// create new uthread
int UthreadCreate(Schedule &schedule, Fun func_, void *args_) {
	std::size_t cur_uthread_id = 0;
	Uthread uthread_;

	for (cur_uthread_id = 0; cur_uthread_id < schedule.threads.size(); ++cur_uthread_id)
		if (schedule.threads[cur_uthread_id].state == FREE)
			break;

	if (cur_uthread_id >= schedule.threads.size()) {
		schedule.threads.push_back(uthread_);
	}

	//getcontext(&(schedule.threads[cur_uthread_id].running_context));
	schedule.threads[cur_uthread_id].func = func_;
	schedule.threads[cur_uthread_id].args = args_;
	schedule.threads[cur_uthread_id].state = RUNNABLE;
	return 0;
}

// suspend a uthread
int UthreadYield(Schedule &schedule) {
	if (schedule.running_thread != -1) {
		int cur_thread = schedule.running_thread;
		ucontext_t *cur_thread_context = &(schedule.threads[cur_thread].running_context);
		ucontext_t *main_context = &(schedule.main);
		schedule.threads[cur_thread].state = SUSPEND;
		//schedule.running_thread = -1;
		swapcontext(cur_thread_context, main_context);
	}

	return schedule.running_thread;
	/*
	if (schedule.threads[cur_thread].state == RUNNING) {
		swapcontext(cur_thread_context, main_context);
		schedule.threads[cur_thread].state = SUSPEND;
	}
	*/
}

void UthreadFuncCalled(Schedule &schedule) {
	int thread_id = schedule.running_thread;
	if (thread_id != -1) {
		schedule.threads[thread_id].func(schedule.threads[thread_id].args);
		schedule.threads[thread_id].state = FREE;
		schedule.running_thread = -1;
	}
}

// resume a suspend uthread
void UtheadResume(Schedule &schedule, int id) {
	Uthread *thread_ready;
	if (schedule.threads.size() <= static_cast<size_t>(id) || id < 0)
		return ;

	thread_ready = &(schedule.threads[id]);
	switch(schedule.threads[id].state) {
		case RUNNABLE:
			thread_ready->running_context.uc_stack.ss_size = DEFAULT_STACK_SIZE;
			thread_ready->running_context.uc_stack.ss_sp = thread_ready->stack;
			thread_ready->running_context.uc_link = &(schedule.main);
			thread_ready->state = RUNNING;
			getcontext(&(thread_ready->running_context));
			schedule.running_thread = id;

			// "(void (*)(void))(UthreadFuncCalled)" means make UthreadFuncCalled 
			// convert to another function type(void UthreadFuncCalled(void))
			makecontext(&(thread_ready->running_context), (void (*)(void))(UthreadFuncCalled), 1, &schedule);
			//break;
		case SUSPEND:
			swapcontext(&(schedule.main), &(thread_ready->running_context));
			break;
		default: ;
	}

}

// judge schedule whether finished
int ScheduleFinished(const Schedule &schedule) {
		if (schedule.running_thread != -1) {
			return 0;
		} else {
			for (int i = 0; i < schedule.threads.size(); ++i) {
			}
		}
			
			if (schedule.threads[schedule.running_thread].state == FREE)
				return 0;

		return 1;
}

// Test Unit
void TestSchedule(Schedule &schedule) {
	getcontext(&(schedule.main));
	UthreadCreate(schedule, Func1, &schedule);
	UthreadCreate(schedule, Func2, &schedule);
	UthreadCreate(schedule, Func3, &schedule);

	while (ScheduleFinished(schedule)) {
		UtheadResume(schedule, 0);
		UtheadResume(schedule, 1);
		UtheadResume(schedule, 2);
	}

	sleep(1);
	printf("*******main\n");

}

int main(void) {
	Schedule schedule;

	TestSchedule(schedule);
	return 0;
}
